<!DOCTYPE html>
<html>
<head>
	<title>Pattap</title>

	<!-- Load the Bootstrap library -->
	<link rel="text/javascript" type = "text/css" href = "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"></script>
	
	<link rel = "stylesheet" type = "text/css" href = "stylesheets/style.css" />
	<!-- Load the Howler.js library -->
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.0.4/howler.js"></script>

	<!-- Load the Paper.js library -->
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/paper.js/0.11.4/paper-full.js"></script>


    
  <div class="jumbotron">
    <p>Press any key from a-z to start!</p> 
  </div>


	<script type="text/paperscript" canvas="myCanvas">

	var pressed=false;

	var sounds=['clay.mp3', 'bubbles.mp3', 'flash-3.mp3', 'suspension.mp3', 'piston-3.mp3', 'moon.mp3', 'glimmer.mp3', 'flash-2.mp3', 'wipe.mp3', 'piston-2.mp3', 'ufo.mp3', 'prism-1.mp3', 'splits.mp3', 'veil.mp3', 'zig-zag.mp3', 'piston-1.mp3', 'prism-3.mp3', 'strike.mp3', 'squiggle.mp3', 'corona.mp3', 'quick.py', 'prism-2.mp3', 'confetti.mp3', 'timer.mp3', 'flash-1.mp3', 'dotted-spiral.mp3', 'pinwheel.mp3'];
	


	function playSound(code){
		var selectedSound=sounds[code];
		var sound = new Howl({
		 src: ['music/'+selectedSound]
		});
		sound.play();
	}

	var objects=[];

	function randomX(){
		return Math.random()*view.size.width;
	}

	function randomY(){
		return Math.random()*view.size.height;
	}

	
	function drawCircle(code){
		var myCircle_path = new Path.Circle(new Point(randomX(),randomY()), 100);
		myCircle_path.fillColor = 'red';
		return myCircle_path;
	}

	function Circle(){
		this.init=function(){
			new_circle_path=drawCircle();
			this.paths=[new_circle_path];
		}
		this.update=function(){
			this.paths[0].scale(.98);
			this.paths[0].fillColor.hue+=3;
		}
		this.die=function(){
			return this.paths[0].area < 1 ;
		}
	}

	function drawSquares(){
		var centerX=randomX(), centerY=randomY();
		var path1 = new Path.Rectangle({	
		point: [centerX-100, centerY-100], 
		size: [200, 200], 
		strokeColor: 'blue',
		strokeWidth: 20
		});
		var path2 = new Path.Rectangle({	
		point: [centerX-50, centerY-50], 
		size: [100, 100], 
		strokeColor: 'green',
		strokeWidth: 20
		});
		return [path1,path2];
	}

	function Square(){
		this.init=function(){
			paths=drawSquares();
			this.paths=paths;
		}
		this.update=function(){
			this.paths.forEach(function(path){
				path.strokeColor.hue+=3;
				path.opacity-=.01;
				path.rotate(3);
			});
		}
		this.die=function(){
			return this.paths[0].opacity<.01;
		}
	}

	function drawWallpaper(){
		var path = new Path.Rectangle({	
		point: [0, 0], 
		size: [view.size.width, view.size.height], 
		fillColor: 'orange'
		});
		return [path];
	}	

	function Wallpaper(){
		this.init=function(){
			paths=drawWallpaper();
			this.paths=paths;
		}
		this.update=function(){
			this.paths.forEach(function(path){
				path.fillColor.hue+=3;
				path.opacity-=.01;
			});
		}
		this.die=function(){
			return this.paths[0].opacity<.01;
		}
	}

	function Stars(){
		this.init=function(){
			var paths=[]
			var path = new Path(new Point(20, 20), new Point(50, 50));
			path.style = {
				strokeColor: 'red',
				strokeWidth: 20,
				strokeCap: 'round'
			};

			// Create a symbol from the path:
			var symbol = new Symbol(path);

			for (var i = 0; i < 15; i++) {
				var position = view.size * Point.random()-new Point(30,30);
				var placed = symbol.place(position);
				paths.push(placed);
			}
			this.symbol=symbol;
			this.paths=paths;
			
		}
		this.update=function(){
			this.symbol.definition.position+=new Point(1, 1);
			this.symbol.definition.strokeColor.hue += 3;
			this.life-=1;
		}
		this.die=function(){
			return this.life<0;
		}
		this.life=100;
	}

	function Rainbow(){
		this.init=function(){
			var point = view.center;
			var colors = [];
			var cycles = 4;
			for (var i = 0, l = 60; i < l; i++) {
				var brightness = 1 - (i / l) * 3;
				var hue = i / l * cycles * 360;
				var color = {
					hue: hue,
					saturation: 1,
					brightness: brightness
				};
				colors.push(color);
			}

			var radius = Math.max(view.size.width, view.size.height) * 0.75;

			var path = new Path.Rectangle({
				rectangle: view.bounds,
				fillColor: {
					origin: point,
					destination: point + [radius, 0],
					gradient: {
						stops: colors,
						radial: true
					}
				}
			});
			this.gradient = path.fillColor.gradient;
			this.paths=[path];
		}
		this.update=function(){
			this.life-=1;
			for (var i = 0; i < this.gradient.stops.length; i++)
			this.gradient.stops[i].color.hue -= 10;
		}
		this.die=function(){
			return this.life<0;
		}
		this.life=100;
	}

	

	function onKeyDown(event) {
		if(!pressed){
			$(".jumbotron").remove();
			pressed=true;
		};
		if('z'>= event.key && event.key>='a'){
			<!--Code from 0 to 25 -->
			var code=event.key.charCodeAt()-97;
			playSound(code);
			var new_object; 
			var num_types=5;
			var num_keys=26;
			if(code<num_keys/num_types){
				new_object=new Circle();
			}
			else if(code<num_keys*2/num_types) {
				new_object=new Square();
			}
			else if(code<num_keys*3/num_types){
				new_object=new Wallpaper();
			}
			else if(code<num_keys*4/num_types){
				new_object=new Stars();
			}
			else new_object=new Rainbow();
			new_object.init();
			objects.push(new_object);
		}
	}

	function onFrame(){
		for(var i=0; i<objects.length; i++){
			my_object=objects[i];
			my_object.update();
			if(my_object.die()){
				my_object.paths.forEach(function(path){
					path.remove();
				});
				objects.splice(i, 1);
				i--;
			}
		}
	}
	
	</script>

<body>
	<canvas id="myCanvas"></canvas>
</body>
	<!-- Load the jQuery.js library -->
	<script type="text/javascript" src="http://code.jquery.com/jquery-3.2.1.min.js"></script>
</head>
</html>

